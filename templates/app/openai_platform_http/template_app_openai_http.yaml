zabbix_export:
  version: '8.0'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 9d672bd570be46fca3756beee93889a3
      template: 'OpenAI Platform by HTTP'
      name: 'OpenAI Platform by HTTP'
      description: |
        Monitoring OpenAI Platform data from https://platform.openai.com.
        
        Setup:
        1. Create an admin token on https://platform.openai.com/settings/organization/admin-keys.
        2. Put the admin token into {$OPENAI.API.TOKEN} macro.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback.
        
        Generated by official Zabbix template tool "Templator"
      wizard_ready: 'YES'
      readme: |
        ## Overview
        
        This template is designed for the effortless deployment of [`OpenAI Platform`](https://platform.openai.com) monitoring by Zabbix via HTTP and doesn't require any external scripts.
        
        Check the [`API documentation`](https://platform.openai.com/docs/api-reference/introduction) for details.
        
        ## Setup
        
        1. Create an admin token on [`OpenAI Platform`](https://platform.openai.com/settings/organization/admin-keys) page.
        2. Specify the admin token in the `API token` field.
      vendor:
        name: Zabbix
        version: 8.0-1
      groups:
        - name: Templates/Applications
      items:
        - uuid: 9a98648edd6e485b9c617939f032e714
          name: 'Get completions item errors'
          type: DEPENDENT
          key: openai.completions_data.errors
          value_type: TEXT
          description: 'Item for gathering all the data item errors.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
              error_handler: DISCARD_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: openai.completions_data.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 53f69d3340524776937d8b395e70e69b
              expression: 'length(last(/OpenAI Platform by HTTP/openai.completions_data.errors))>0'
              name: 'OpenAI Platform: There are errors in the ''Get completions'' metric'
              priority: WARNING
              description: 'An error occurred while attempting to retrieve values for the ''Get completions'' item.'
              tags:
                - tag: scope
                  value: availability
        - uuid: a1eacef4e2714188912f409100b92a4a
          name: 'Get completions'
          type: SCRIPT
          key: openai.completions_data.get
          delay: 10m
          history: '0'
          value_type: TEXT
          params: |
            var OpenAI = {
            	params: {},
            	headers: {},
            
            	setParams: function (params, required) {
            		required = required || [];
            		required.concat(['api_url', 'api_token', 'user_agent']).forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined'
            				|| params[field] === '') {
            				throw 'Required parameter is not set: "' + field + '".';
            			}
            		});
            
            		OpenAI.params = params;
            
            		if (typeof OpenAI.params.api_url === 'string' && !OpenAI.params.api_url.endsWith('/')) {
            			OpenAI.params.api_url += '/';
            		}
            	},
            
            	apiRequest: function (uri, params) {
            		var final_data = [];
            
            		function fetchPage(page_cursor) {
            			var request = new HttpRequest(),
            				response;
            
            			var queryString = Object.keys(params).map(function(key) {
            				return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            			}).join('&');
            		
            			if (typeof page_cursor !== 'undefined') {
            				queryString += '&' + ((page_cursor.indexOf('page') !== -1) ? 'page' : 'after') + '=' + encodeURIComponent(page_cursor);
            			}
            
            			request.addHeader('User-Agent: ' + OpenAI.params.user_agent);
            			request.addHeader('Content-Type: application/json');
            			request.addHeader('Authorization: Bearer ' + OpenAI.params.api_token);
            
            			if (typeof OpenAI.params.http_proxy !== 'undefined' && OpenAI.params.http_proxy !== '') {
            				request.setProxy(OpenAI.params.http_proxy);
            				Zabbix.log(4, '[ OpenAI API ] Using HTTP proxy: ' + OpenAI.params.http_proxy);
            			}
            
            			url = uri + '?' + queryString;
            
            			Zabbix.log(4, '[ OpenAI API ] Sending request: ' + url);
            
            			response = request.get(url);
            
            			Zabbix.log(4, '[ OpenAI API ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            			if (request.getStatus() < 200 || request.getStatus() >= 300) {
            				throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            			}
            
            			Object.keys(request.getHeaders()).forEach(function(key) {
            				if (key.indexOf('openai') == 0) {
            					OpenAI.headers[key] = request.getHeaders()[key];
            				}
            			});
            
            			try {
            				response = JSON.parse(response);
            			}
            			catch (error) {
            				throw 'Failed to parse response received from API. Check debug log for more information.';
            			}
            
            			final_data = final_data.concat(response.data || []);
            
            			if (response.has_more && response.next_page) {
            				fetchPage(response.next_page);
            			}
            
            			if (response.has_more && response.last_id) {
            				fetchPage(response.last_id);
            			}
            
            			delete request;
            		}
            
            		fetchPage();
            
            		return final_data;
            	},
            }
            
            var result = {},
            	now = new Date(),
            	startOfHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()-1),
            	endOfHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());
            
            try {
            	OpenAI.setParams(JSON.parse(value));
            
            	var params = {
            		"start_time": Math.floor(startOfHour.getTime() / 1000),
            		"end_time": Math.floor(endOfHour.getTime() / 1000),
            		"group_by": "model,project_id",
            		"bucket_width": "1h"
            	};
            
            	result['completions'] = OpenAI.apiRequest(
            		OpenAI.params.api_url + 'organization/usage/completions',
            		params
            	);
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ OpenAI API ] ERROR: ' + error);
            	result['error'] = error;
            }
            
            return JSON.stringify(result);
          description: 'Item for gathering completions data from OpenAI Platform.'
          timeout: '{$OPENAI.DATA.TIMEOUT}'
          parameters:
            - name: api_token
              value: '{$OPENAI.TOKEN}'
            - name: api_url
              value: '{$OPENAI.API.URL}'
            - name: user_agent
              value: '{$OPENAI.API.USER.AGENT}'
          tags:
            - tag: component
              value: raw
        - uuid: 7aea5f1d5f5a4f949dbce67f660d4f39
          name: 'Get costs item errors'
          type: DEPENDENT
          key: openai.costs_data.errors
          value_type: TEXT
          description: 'Item for gathering all the data item errors.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
              error_handler: DISCARD_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: openai.costs_data.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 0f80d278b2744801aa729f51281bf5ec
              expression: 'length(last(/OpenAI Platform by HTTP/openai.costs_data.errors))>0'
              name: 'OpenAI Platform: There are errors in the ''Get costs'' metric'
              priority: WARNING
              description: 'An error occurred while attempting to retrieve values for the ''Get costs'' item.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 31e311b48e0148b4a089b9da89a0fbd6
          name: 'Get costs'
          type: SCRIPT
          key: openai.costs_data.get
          delay: 1h
          history: '0'
          value_type: TEXT
          params: |
            var OpenAI = {
            	params: {},
            	headers: {},
            
            	setParams: function (params, required) {
            		required = required || [];
            		required.concat(['api_url', 'api_token', 'user_agent']).forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined'
            				|| params[field] === '') {
            				throw 'Required parameter is not set: "' + field + '".';
            			}
            		});
            
            		OpenAI.params = params;
            
            		if (typeof OpenAI.params.api_url === 'string' && !OpenAI.params.api_url.endsWith('/')) {
            			OpenAI.params.api_url += '/';
            		}
            	},
            
            	apiRequest: function (uri, params) {
            		var final_data = [];
            
            		function fetchPage(page_cursor) {
            			var request = new HttpRequest(),
            				response;
            
            			var queryString = Object.keys(params).map(function(key) {
            				return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            			}).join('&');
            		
            			if (typeof page_cursor !== 'undefined') {
            				queryString += '&' + ((page_cursor.indexOf('page') !== -1) ? 'page' : 'after') + '=' + encodeURIComponent(page_cursor);
            			}
            
            			request.addHeader('User-Agent: ' + OpenAI.params.user_agent);
            			request.addHeader('Content-Type: application/json');
            			request.addHeader('Authorization: Bearer ' + OpenAI.params.api_token);
            
            			if (typeof OpenAI.params.http_proxy !== 'undefined' && OpenAI.params.http_proxy !== '') {
            				request.setProxy(OpenAI.params.http_proxy);
            				Zabbix.log(4, '[ OpenAI API ] Using HTTP proxy: ' + OpenAI.params.http_proxy);
            			}
            
            			url = uri + '?' + queryString;
            
            			Zabbix.log(4, '[ OpenAI API ] Sending request: ' + url);
            
            			response = request.get(url);
            
            			Zabbix.log(4, '[ OpenAI API ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            			if (request.getStatus() < 200 || request.getStatus() >= 300) {
            				throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            			}
            
            			Object.keys(request.getHeaders()).forEach(function(key) {
            				if (key.indexOf('openai') == 0) {
            					OpenAI.headers[key] = request.getHeaders()[key];
            				}
            			});
            
            			try {
            				response = JSON.parse(response);
            			}
            			catch (error) {
            				throw 'Failed to parse response received from API. Check debug log for more information.';
            			}
            
            			final_data = final_data.concat(response.data || []);
            
            			if (response.has_more && response.next_page) {
            				fetchPage(response.next_page);
            			}
            
            			if (response.has_more && response.last_id) {
            				fetchPage(response.last_id);
            			}
            
            			delete request;
            		}
            
            		fetchPage();
            
            		return final_data;
            	},
            }
            
            var result = {};
            
            try {
            	OpenAI.setParams(JSON.parse(value));
            
            	var params = {
            		"start_time": Math.floor((Date.now() - (86400 * 1000)) / 1000),
            		"group_by": "project_id",
            		"bucket_width": "1d"
            	};
            
            	result['costs'] = OpenAI.apiRequest(
            		OpenAI.params.api_url + 'organization/costs',
            		params
            	);
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ OpenAI API ] ERROR: ' + error);
            	result['error'] = error;
            }
            
            return JSON.stringify(result);
          description: 'Item for gathering costs data from OpenAI Platform.'
          timeout: '{$OPENAI.DATA.TIMEOUT}'
          parameters:
            - name: api_token
              value: '{$OPENAI.TOKEN}'
            - name: api_url
              value: '{$OPENAI.API.URL}'
            - name: user_agent
              value: '{$OPENAI.API.USER.AGENT}'
          tags:
            - tag: component
              value: raw
        - uuid: 2b6389a3066e4a99a7b6e7635cdbca95
          name: 'Total daily expenses'
          type: DEPENDENT
          key: openai.expenses.total
          value_type: FLOAT
          units: '!USD'
          description: 'Total amount of expenses for the past day.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
            - type: JSONPATH
              parameters:
                - '$.costs[0].results..amount.value.sum()'
              error_handler: CUSTOM_VALUE
              error_handler_params: '0'
          master_item:
            key: openai.costs_data.get
          tags:
            - tag: component
              value: costs
          triggers:
            - uuid: 4ce9883d4f844a65a3a3a9a4fe197b27
              expression: 'last(/OpenAI Platform by HTTP/openai.expenses.total)>{$OPENAI.TOTAL_EXPENSES.MAX}'
              name: 'OpenAI Platform: Total daily expenses exceeded'
              event_name: 'OpenAI Platform: Total daily expenses exceeded (>{$OPENAI.TOTAL_EXPENSES.MAX})'
              opdata: 'Total expenses for the past day: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'The daily expense limit is higher than the maximum.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: performance
        - uuid: bccec362e06947199c316f9996002e5c
          name: 'Get data item errors'
          type: DEPENDENT
          key: openai.platform_data.errors
          value_type: TEXT
          description: 'Item for gathering all the data item errors.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
              error_handler: DISCARD_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: openai.platform_data.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: fb5de0af7d0e490ea361ea82282329c6
              expression: 'length(last(/OpenAI Platform by HTTP/openai.platform_data.errors))>0'
              name: 'OpenAI Platform: There are errors in the ''Get data'' metric'
              priority: WARNING
              description: 'An error occurred while attempting to retrieve values for the ''Get data'' item.'
              tags:
                - tag: scope
                  value: availability
        - uuid: d31248b2c1ed4983bca0125ae142e266
          name: 'Get data'
          type: SCRIPT
          key: openai.platform_data.get
          history: '0'
          value_type: TEXT
          params: |
            var OpenAI = {
            	params: {},
            	headers: {},
            
            	setParams: function (params, required) {
            		required = required || [];
            		required.concat(['api_url', 'api_token', 'user_agent']).forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined'
            				|| params[field] === '') {
            				throw 'Required parameter is not set: "' + field + '".';
            			}
            		});
            
            		OpenAI.params = params;
            
            		if (typeof OpenAI.params.api_url === 'string' && !OpenAI.params.api_url.endsWith('/')) {
            			OpenAI.params.api_url += '/';
            		}
            	},
            
            	apiRequest: function (uri, params) {
            		var final_data = [];
            
            		function fetchPage(page_cursor) {
            			var request = new HttpRequest(),
            				response;
            
            			var queryString = Object.keys(params).map(function(key) {
            				return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            			}).join('&');
            		
            			if (typeof page_cursor !== 'undefined') {
            				queryString += '&' + ((page_cursor.indexOf('page') !== -1) ? 'page' : 'after') + '=' + encodeURIComponent(page_cursor);
            			}
            
            			request.addHeader('User-Agent: ' + OpenAI.params.user_agent);
            			request.addHeader('Content-Type: application/json');
            			request.addHeader('Authorization: Bearer ' + OpenAI.params.api_token);
            
            			if (typeof OpenAI.params.http_proxy !== 'undefined' && OpenAI.params.http_proxy !== '') {
            				request.setProxy(OpenAI.params.http_proxy);
            				Zabbix.log(4, '[ OpenAI API ] Using HTTP proxy: ' + OpenAI.params.http_proxy);
            			}
            
            			url = uri + '?' + queryString;
            
            			Zabbix.log(4, '[ OpenAI API ] Sending request: ' + url);
            
            			response = request.get(url);
            
            			Zabbix.log(4, '[ OpenAI API ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            			if (request.getStatus() < 200 || request.getStatus() >= 300) {
            				throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            			}
            
            			Object.keys(request.getHeaders()).forEach(function(key) {
            				if (key.indexOf('openai') == 0) {
            					OpenAI.headers[key] = request.getHeaders()[key];
            				}
            			});
            
            			try {
            				response = JSON.parse(response);
            			}
            			catch (error) {
            				throw 'Failed to parse response received from API. Check debug log for more information.';
            			}
            
            			final_data = final_data.concat(response.data || []);
            
            			if (response.has_more && response.next_page) {
            				fetchPage(response.next_page);
            			}
            
            			if (response.has_more && response.last_id) {
            				fetchPage(response.last_id);
            			}
            
            			delete request;
            		}
            
            		fetchPage();
            
            		return final_data;
            	},
            }
            
            var result = {};
            
            try {
            	OpenAI.setParams(JSON.parse(value));
            
            	result['projects'] = OpenAI.apiRequest(OpenAI.params.api_url + 'organization/projects', {});
            	result['users'] = OpenAI.apiRequest(OpenAI.params.api_url + 'organization/users', {});
            	result['headers'] = OpenAI.headers;
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ OpenAI API ] ERROR: ' + error);
            	result['error'] = error;
            }
            
            return JSON.stringify(result);
          description: 'Item for gathering OpenAI Platform data.'
          timeout: '{$OPENAI.DATA.TIMEOUT}'
          parameters:
            - name: api_token
              value: '{$OPENAI.TOKEN}'
            - name: api_url
              value: '{$OPENAI.API.URL}'
            - name: user_agent
              value: '{$OPENAI.API.USER.AGENT}'
          tags:
            - tag: component
              value: raw
        - uuid: 0e88e47a57b24122b44f3db7be1a81d4
          name: Version
          type: DEPENDENT
          key: openai.version
          value_type: CHAR
          description: 'REST API version used for requests.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.headers["openai-version"]'
              error_handler: DISCARD_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: openai.platform_data.get
          tags:
            - tag: component
              value: system
      discovery_rules:
        - uuid: 5ad946dd847944a294a56ed0a244a219
          name: '[{#NAME}]: Model discovery'
          type: DEPENDENT
          key: 'openai.model.discovery[{#ID}]'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#MODEL}'
                value: '{$OPENAI.MODEL.NAME.MATCHES}'
              - macro: '{#MODEL}'
                value: '{$OPENAI.MODEL.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          lifetime: 30d
          enabled_lifetime_type: DISABLE_AFTER
          enabled_lifetime: 7d
          description: 'Discovering models used in the {#NAME} project on OpenAI Platform.'
          item_prototypes:
            - uuid: 03057358da3f42c9bce9b3f9814e108a
              name: '[{#NAME}/{#MODEL}]: Get model data'
              type: DEPENDENT
              key: 'openai.model.get[{#ID},{#MODEL}]'
              history: '0'
              value_type: TEXT
              description: 'Item for gathering data of the ''{#MODEL}'' model.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
                - type: JSONPATH
                  parameters:
                    - '$.completions..results[?(@.project_id == ''{#ID}'' && @.model == ''{#MODEL}'')].first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '{}'
              master_item:
                key: openai.completions_data.get
              tags:
                - tag: component
                  value: raw
                - tag: model
                  value: '{#MODEL}'
            - uuid: 635d12e823b547169da209e7aaa3ec79
              name: '[{#NAME}/{#MODEL}]: Model request number'
              type: DEPENDENT
              key: 'openai.requests.number[{#ID},{#MODEL}]'
              description: 'Total number of requests to the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.num_model_requests
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
            - uuid: 58083a34c49a4a5298f75717085969a2
              name: '[{#NAME}/{#MODEL}]: Input tokens'
              type: DEPENDENT
              key: 'openai.tokens.input[{#ID},{#MODEL}]'
              description: 'Total number of input tokens received by the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.input_tokens
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
            - uuid: 8210adc308084ac08a9550e89b73d663
              name: '[{#NAME}/{#MODEL}]: Input audio tokens'
              type: DEPENDENT
              key: 'openai.tokens.input_audio[{#ID},{#MODEL}]'
              description: 'Total number of input audio tokens sent by the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.input_audio_tokens
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
            - uuid: d4fa2aa80bb647b8a2b79f556004af7c
              name: '[{#NAME}/{#MODEL}]: Input cached tokens'
              type: DEPENDENT
              key: 'openai.tokens.input_cached[{#ID},{#MODEL}]'
              description: 'Total number of input cached tokens sent by the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.input_cached_tokens
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
            - uuid: e56e31c7988041a9b4506ffba4e6fa52
              name: '[{#NAME}/{#MODEL}]: Output tokens'
              type: DEPENDENT
              key: 'openai.tokens.output[{#ID},{#MODEL}]'
              description: 'Total number of output tokens sent by the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.output_tokens
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
            - uuid: 0dc8c1eaa9314927b7108cc93c854521
              name: '[{#NAME}/{#MODEL}]: Output audio tokens'
              type: DEPENDENT
              key: 'openai.tokens.output_audio[{#ID},{#MODEL}]'
              description: 'Total number of output audio tokens sent by the model {#MODEL} in the {#NAME} project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.output_audio_tokens
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.model.get[{#ID},{#MODEL}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: model
                - tag: model
                  value: '{#MODEL}'
          graph_prototypes:
            - uuid: d992c2b6fef4446591d7014cabc94dea
              name: '[{#NAME}/{#MODEL}]: Tokens statistics'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input[{#ID},{#MODEL}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.output[{#ID},{#MODEL}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input_cached[{#ID},{#MODEL}]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input_audio[{#ID},{#MODEL}]'
                - sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.output_audio[{#ID},{#MODEL}]'
          parent_discovery_rule:
            key: openai.project.discovery
          master_item:
            key: openai.completions_data.get
          lld_macro_paths:
            - lld_macro: '{#MODEL}'
              path: $.model
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
            - type: JSONPATH
              parameters:
                - '$.completions..results[?(@.project_id == ''{#ID}'')]'
              error_handler: DISCARD_VALUE
        - uuid: 02fc52eb71fe496a909cb161462f7cd4
          name: 'Project discovery'
          type: DEPENDENT
          key: openai.project.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$OPENAI.PROJECT.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$OPENAI.PROJECT.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovering projects on OpenAI Platform.'
          item_prototypes:
            - uuid: 93782ec08c734abd9a8bb7c6e8c157ab
              name: '[{#NAME}]: Get completions data'
              type: DEPENDENT
              key: 'openai.completions.get[{#ID}]'
              history: '0'
              value_type: TEXT
              description: 'Item for gathering completions data for the {#NAME} project.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
                - type: JSONPATH
                  parameters:
                    - '$.completions..results..[?(@.project_id == ''{#ID}'')]'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '{}'
              master_item:
                key: openai.completions_data.get
              tags:
                - tag: component
                  value: raw
                - tag: project
                  value: '{#NAME}'
            - uuid: 8c51d3b0157f476eb4a62c036473438b
              name: '[{#NAME}]: Daily expenses'
              type: DEPENDENT
              key: 'openai.expenses.amount[{#ID}]'
              value_type: FLOAT
              units: '!USD'
              description: 'Amount of expenses for the past day.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..amount.value.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.expenses.get[{#ID}]'
              tags:
                - tag: component
                  value: costs
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
              trigger_prototypes:
                - uuid: 406d38421362474d98fac3e3bc4d41b1
                  expression: 'last(/OpenAI Platform by HTTP/openai.expenses.amount[{#ID}])>{$OPENAI.EXPENSES.MAX:"{#NAME}"}'
                  name: 'OpenAI Platform: [{#NAME}]: Daily expenses exceeded'
                  event_name: 'OpenAI Platform: [{#NAME}]: Daily expenses exceeded (>{$OPENAI.EXPENSES.MAX:"{#NAME}"})'
                  opdata: 'Expenses for the past day: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'The daily expense limit is higher than the maximum.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: c6e74fff343c4c0fbfee1704ba794d40
              name: '[{#NAME}]: Get expenses data'
              type: DEPENDENT
              key: 'openai.expenses.get[{#ID}]'
              history: '0'
              value_type: TEXT
              description: 'Item for gathering expenses data for the {#NAME} project.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: JSONPATH
                  parameters:
                    - '$.costs[0].results..[?(@.project_id == ''{#ID}'')]'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '{}'
              master_item:
                key: openai.costs_data.get
              tags:
                - tag: component
                  value: raw
                - tag: project
                  value: '{#NAME}'
            - uuid: 797302910c5b4f238d77aaa3a22551f3
              name: '[{#NAME}]: Model request number'
              type: DEPENDENT
              key: 'openai.requests.number[{#ID}]'
              description: 'Total number of requests to all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..num_model_requests.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
            - uuid: 67ffcc8be80641acbe6556381d540fba
              name: '[{#NAME}]: Input tokens'
              type: DEPENDENT
              key: 'openai.tokens.input[{#ID}]'
              description: 'Total number of input tokens received by all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..input_tokens.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
            - uuid: f4edc1c6e7354760b5cd7dc53697be30
              name: '[{#NAME}]: Input audio tokens'
              type: DEPENDENT
              key: 'openai.tokens.input_audio[{#ID}]'
              description: 'Total number of input audio tokens sent by all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..input_audio_tokens.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
            - uuid: fc03925deb5d40efbd443160d60e616a
              name: '[{#NAME}]: Input cached tokens'
              type: DEPENDENT
              key: 'openai.tokens.input_cached[{#ID}]'
              description: 'Total number of input cached tokens sent by all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..input_cached_tokens.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
            - uuid: b4502508f47f40318cb56631002d801d
              name: '[{#NAME}]: Output tokens'
              type: DEPENDENT
              key: 'openai.tokens.output[{#ID}]'
              description: 'Total number of output tokens sent by all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..output_tokens.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
            - uuid: 8db5eb1f3c39437db160e02047da5ede
              name: '[{#NAME}]: Output audio tokens'
              type: DEPENDENT
              key: 'openai.tokens.output_audio[{#ID}]'
              description: 'Total number of output audio tokens sent by all models in the project.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..output_audio_tokens.sum()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'openai.completions.get[{#ID}]'
              tags:
                - tag: component
                  value: completions
                - tag: component
                  value: project
                - tag: project
                  value: '{#NAME}'
          graph_prototypes:
            - uuid: ee1bb621d8294ea88db88de69f6066ca
              name: '[{#NAME}]: Daily expenses'
              graph_items:
                - drawtype: GRADIENT_LINE
                  color: 199C0D
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.expenses.amount[{#ID}]'
            - uuid: d0d0638efe8144a39a81e3026559bcd3
              name: '[{#NAME}]: Tokens statistics'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input[{#ID}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.output[{#ID}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input_cached[{#ID}]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.input_audio[{#ID}]'
                - sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'OpenAI Platform by HTTP'
                    key: 'openai.tokens.output_audio[{#ID}]'
          master_item:
            key: openai.platform_data.get
          lld_macro_paths:
            - lld_macro: '{#ID}'
              path: $.id
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#STATUS}'
              path: $.status
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.projects
              error_handler: DISCARD_VALUE
      tags:
        - tag: class
          value: software
        - tag: subclass
          value: ai
        - tag: target
          value: openai
      macros:
        - macro: '{$OPENAI.API.URL}'
          value: 'https://api.openai.com/v1'
          description: 'OpenAI API URL.'
          config:
            type: TEXT
            priority: '1'
            label: 'API URL'
            description: 'OpenAI API URL.'
        - macro: '{$OPENAI.API.USER.AGENT}'
          value: 'ZabbixServer/1.0 Zabbix'
          description: 'User-Agent used for requests to OpenAI API.'
          config:
            type: TEXT
            priority: '10'
            section_name: Other
            label: 'User-Agent of API requests'
            description: 'User-Agent used for requests to OpenAI API.'
        - macro: '{$OPENAI.DATA.TIMEOUT}'
          value: 15s
          description: 'Response timeout for an API.'
          config:
            type: TEXT
            priority: '9'
            section_name: Other
            label: 'API response timeout'
            description: 'Response timeout for an API.'
        - macro: '{$OPENAI.EXPENSES.MAX}'
          value: '100'
          description: 'Limit on daily expenses per project.'
          config:
            type: TEXT
            priority: '4'
            label: 'Max project daily expenses'
            description: 'Limit on daily expenses per project. No less than 0.'
            regex: '^-?([0-9]+|(([0-9]+)\.([0-9]+)))$'
        - macro: '{$OPENAI.HTTP_PROXY}'
          description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. See the documentation at https://www.zabbix.com/documentation/8.0/manual/config/items/itemtypes/http'
          config:
            type: TEXT
            priority: '11'
            section_name: Other
            label: 'HTTP proxy for API requests'
            description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. See the documentation at https://www.zabbix.com/documentation/8.0/manual/config/items/itemtypes/http'
        - macro: '{$OPENAI.MODEL.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in OpenAI Platform model discovery. Can be overridden on the host or linked template level.'
          config:
            type: TEXT
            priority: '7'
            section_name: Filters
            label: 'Model discovery macro (include)'
            description: 'This macro is used in model discovery. Can be overridden on the host or linked template level.'
        - macro: '{$OPENAI.MODEL.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in OpenAI Platform model discovery. Can be overridden on the host or linked template level.'
          config:
            type: TEXT
            priority: '8'
            section_name: Filters
            label: 'Model discovery macro (exclude)'
            description: 'This macro is used in model discovery. Can be overridden on the host or linked template level.'
        - macro: '{$OPENAI.PROJECT.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in OpenAI Platform project discovery. Can be overridden on the host or linked template level.'
          config:
            type: TEXT
            priority: '5'
            section_name: Filters
            label: 'Project discovery macro (include)'
            description: 'This macro is used in project discovery. Can be overridden on the host or linked template level.'
        - macro: '{$OPENAI.PROJECT.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in OpenAI Platform project discovery. Can be overridden on the host or linked template level.'
          config:
            type: TEXT
            priority: '6'
            section_name: Filters
            label: 'Project discovery macro (exclude)'
            description: 'This macro is used in project discovery. Can be overridden on the host or linked template level.'
        - macro: '{$OPENAI.TOKEN}'
          type: SECRET_TEXT
          description: 'OpenAI API token.'
          config:
            type: TEXT
            priority: '2'
            label: 'API token'
            description: 'OpenAI API token.'
            required: 'YES'
        - macro: '{$OPENAI.TOTAL_EXPENSES.MAX}'
          value: '1000'
          description: 'Limit on total daily expenses for the entire organization.'
          config:
            type: TEXT
            priority: '3'
            label: 'Max total daily expenses'
            description: 'Limit on total daily expenses for the entire organization. No less than 0.'
            regex: '^-?([0-9]+|(([0-9]+)\.([0-9]+)))$'
      dashboards:
        - uuid: ca4bba8a3a8f4ec1b9c5b50d6608eb69
          name: 'OpenAI Platform: General'
          auto_start: 'NO'
          pages:
            - name: General
              widgets:
                - type: clock
                  name: Today
                  width: '24'
                  height: '4'
                  fields:
                    - type: INTEGER
                      name: clock_type
                      value: '1'
                    - type: INTEGER
                      name: show.0
                      value: '1'
                    - type: INTEGER
                      name: show.1
                      value: '2'
                    - type: INTEGER
                      name: show.2
                      value: '3'
                - type: problems
                  'y': '4'
                  width: '72'
                  height: '7'
                  fields:
                    - type: STRING
                      name: reference
                      value: NPDJE
                - type: item
                  name: 'Expenses for the previous day'
                  x: '24'
                  width: '24'
                  height: '4'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'OpenAI Platform by HTTP'
                        key: openai.expenses.total
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: STRING
                      name: units
                      value: $
                    - type: INTEGER
                      name: units_pos
                      value: '0'
                - type: item
                  name: 'ChatGPT Version'
                  x: '48'
                  width: '24'
                  height: '4'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'OpenAI Platform by HTTP'
                        key: openai.version
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: INTEGER
                      name: units_show
                      value: '0'
                    - type: INTEGER
                      name: value_size
                      value: '30'
            - name: 'Project statistics'
              widgets:
                - type: honeycomb
                  name: 'Input tokens'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAA
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Input audio tokens'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input audio tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAC
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Input cached tokens'
                  'y': '10'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input cached tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAE
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Daily expenses'
                  'y': '15'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Daily expenses'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAG
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '4'
                    - type: STRING
                      name: secondary_label_position
                      value: '0'
                    - type: STRING
                      name: secondary_label_units
                      value: $
                - type: honeycomb
                  name: 'Output tokens'
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Output tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAB
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Output audio tokens'
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Output audio tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAD
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Model request number'
                  x: '36'
                  'y': '10'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Model request number'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: project
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAF
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
            - name: 'Model statistics'
              widgets:
                - type: honeycomb
                  name: 'Input tokens'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAH
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Input audio tokens'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input audio tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAJ
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Input cached tokens'
                  'y': '10'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Input cached tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAL
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Output tokens'
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Output tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAI
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Output audio tokens'
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Output audio tokens'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAK
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'Model request number'
                  x: '36'
                  'y': '10'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Model request number'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: model
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^\[.+?\/(.*)\]\:.*", \1)}'
                    - type: STRING
                      name: reference
                      value: AAAAM
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
  graphs:
    - uuid: 6177a93fb8fa4dc4934a88be88f51838
      name: 'Total daily expenses'
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'OpenAI Platform by HTTP'
            key: openai.expenses.total
